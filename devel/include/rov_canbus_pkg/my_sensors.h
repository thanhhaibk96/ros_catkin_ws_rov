// Generated by gencpp from file rov_canbus_pkg/my_sensors.msg
// DO NOT EDIT!


#ifndef ROV_CANBUS_PKG_MESSAGE_MY_SENSORS_H
#define ROV_CANBUS_PKG_MESSAGE_MY_SENSORS_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <rov_canbus_pkg/imu_data.h>

namespace rov_canbus_pkg
{
template <class ContainerAllocator>
struct my_sensors_
{
  typedef my_sensors_<ContainerAllocator> Type;

  my_sensors_()
    : imu()
    , depth(0.0)  {
    }
  my_sensors_(const ContainerAllocator& _alloc)
    : imu(_alloc)
    , depth(0.0)  {
  (void)_alloc;
    }



   typedef  ::rov_canbus_pkg::imu_data_<ContainerAllocator>  _imu_type;
  _imu_type imu;

   typedef float _depth_type;
  _depth_type depth;





  typedef boost::shared_ptr< ::rov_canbus_pkg::my_sensors_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rov_canbus_pkg::my_sensors_<ContainerAllocator> const> ConstPtr;

}; // struct my_sensors_

typedef ::rov_canbus_pkg::my_sensors_<std::allocator<void> > my_sensors;

typedef boost::shared_ptr< ::rov_canbus_pkg::my_sensors > my_sensorsPtr;
typedef boost::shared_ptr< ::rov_canbus_pkg::my_sensors const> my_sensorsConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rov_canbus_pkg::my_sensors_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rov_canbus_pkg::my_sensors_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rov_canbus_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'rov_canbus_pkg': ['/home/ubuntu/ros_catkin_ws_rov/src/rov_canbus_pkg/msg'], 'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rov_canbus_pkg::my_sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rov_canbus_pkg::my_sensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rov_canbus_pkg::my_sensors_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rov_canbus_pkg::my_sensors_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rov_canbus_pkg::my_sensors_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rov_canbus_pkg::my_sensors_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rov_canbus_pkg::my_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "e69800ec6584751e8ef4cbb24d578d8c";
  }

  static const char* value(const ::rov_canbus_pkg::my_sensors_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xe69800ec6584751eULL;
  static const uint64_t static_value2 = 0x8ef4cbb24d578d8cULL;
};

template<class ContainerAllocator>
struct DataType< ::rov_canbus_pkg::my_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rov_canbus_pkg/my_sensors";
  }

  static const char* value(const ::rov_canbus_pkg::my_sensors_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rov_canbus_pkg::my_sensors_<ContainerAllocator> >
{
  static const char* value()
  {
    return "imu_data imu\n\
float32 depth\n\
================================================================================\n\
MSG: rov_canbus_pkg/imu_data\n\
float32 roll\n\
float32 pitch\n\
float32 yaw\n\
";
  }

  static const char* value(const ::rov_canbus_pkg::my_sensors_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rov_canbus_pkg::my_sensors_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.imu);
      stream.next(m.depth);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct my_sensors_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rov_canbus_pkg::my_sensors_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rov_canbus_pkg::my_sensors_<ContainerAllocator>& v)
  {
    s << indent << "imu: ";
    s << std::endl;
    Printer< ::rov_canbus_pkg::imu_data_<ContainerAllocator> >::stream(s, indent + "  ", v.imu);
    s << indent << "depth: ";
    Printer<float>::stream(s, indent + "  ", v.depth);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROV_CANBUS_PKG_MESSAGE_MY_SENSORS_H
