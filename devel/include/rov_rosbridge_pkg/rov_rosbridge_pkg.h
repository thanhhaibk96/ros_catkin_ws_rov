// Generated by gencpp from file rov_rosbridge_pkg/rov_rosbridge_pkg.msg
// DO NOT EDIT!


#ifndef ROV_ROSBRIDGE_PKG_MESSAGE_ROV_ROSBRIDGE_PKG_H
#define ROV_ROSBRIDGE_PKG_MESSAGE_ROV_ROSBRIDGE_PKG_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace rov_rosbridge_pkg
{
template <class ContainerAllocator>
struct rov_rosbridge_pkg_
{
  typedef rov_rosbridge_pkg_<ContainerAllocator> Type;

  rov_rosbridge_pkg_()
    : bldc(0.0)
    , green_1(0.0)
    , green_2(0.0)
    , yellow_1(0.0)
    , yellow_2(0.0)
    , yellow_3(0.0)  {
    }
  rov_rosbridge_pkg_(const ContainerAllocator& _alloc)
    : bldc(0.0)
    , green_1(0.0)
    , green_2(0.0)
    , yellow_1(0.0)
    , yellow_2(0.0)
    , yellow_3(0.0)  {
  (void)_alloc;
    }



   typedef double _bldc_type;
  _bldc_type bldc;

   typedef double _green_1_type;
  _green_1_type green_1;

   typedef double _green_2_type;
  _green_2_type green_2;

   typedef double _yellow_1_type;
  _yellow_1_type yellow_1;

   typedef double _yellow_2_type;
  _yellow_2_type yellow_2;

   typedef double _yellow_3_type;
  _yellow_3_type yellow_3;





  typedef boost::shared_ptr< ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> const> ConstPtr;

}; // struct rov_rosbridge_pkg_

typedef ::rov_rosbridge_pkg::rov_rosbridge_pkg_<std::allocator<void> > rov_rosbridge_pkg;

typedef boost::shared_ptr< ::rov_rosbridge_pkg::rov_rosbridge_pkg > rov_rosbridge_pkgPtr;
typedef boost::shared_ptr< ::rov_rosbridge_pkg::rov_rosbridge_pkg const> rov_rosbridge_pkgConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace rov_rosbridge_pkg

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'rov_rosbridge_pkg': ['/home/ubuntu/ros_catkin_ws_rov/src/rov_rosbridge_pkg/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "9367b8cc652373d45d2d90195a1cf1bf";
  }

  static const char* value(const ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x9367b8cc652373d4ULL;
  static const uint64_t static_value2 = 0x5d2d90195a1cf1bfULL;
};

template<class ContainerAllocator>
struct DataType< ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "rov_rosbridge_pkg/rov_rosbridge_pkg";
  }

  static const char* value(const ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 bldc\n\
float64 green_1\n\
float64 green_2\n\
float64 yellow_1\n\
float64 yellow_2\n\
float64 yellow_3\n\
";
  }

  static const char* value(const ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.bldc);
      stream.next(m.green_1);
      stream.next(m.green_2);
      stream.next(m.yellow_1);
      stream.next(m.yellow_2);
      stream.next(m.yellow_3);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct rov_rosbridge_pkg_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::rov_rosbridge_pkg::rov_rosbridge_pkg_<ContainerAllocator>& v)
  {
    s << indent << "bldc: ";
    Printer<double>::stream(s, indent + "  ", v.bldc);
    s << indent << "green_1: ";
    Printer<double>::stream(s, indent + "  ", v.green_1);
    s << indent << "green_2: ";
    Printer<double>::stream(s, indent + "  ", v.green_2);
    s << indent << "yellow_1: ";
    Printer<double>::stream(s, indent + "  ", v.yellow_1);
    s << indent << "yellow_2: ";
    Printer<double>::stream(s, indent + "  ", v.yellow_2);
    s << indent << "yellow_3: ";
    Printer<double>::stream(s, indent + "  ", v.yellow_3);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROV_ROSBRIDGE_PKG_MESSAGE_ROV_ROSBRIDGE_PKG_H
